<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Golang on tatsushid.github.io </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tatsushid.github.io/tags/golang/index.xml/</link>
    <language>ja-jp</language>
    
    
    <updated>Tue, 23 Sep 2014 06:42:55 JST</updated>
    
    <item>
      <title>Go の構造体とポインタと omitempty の話</title>
      <link>http://tatsushid.github.io/blog/2014/09/go-structure-pointer-and-omitempty/</link>
      <pubDate>Tue, 23 Sep 2014 06:42:55 JST</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2014/09/go-structure-pointer-and-omitempty/</guid>
      <description>

&lt;p&gt;（下記は go 1.3.1 での話で、異なるバージョンだと動作も違う可能性があるので注意）&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;Go で &lt;code&gt;encoding/xml&lt;/code&gt; を使って XML のエンコーディングを行っている時に、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ある特定のタグの子要素ないし属性が一つでもある場合は、そのタグを出力する&lt;/li&gt;
&lt;li&gt;上記のいずれもない場合は、タグは出力しない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を実現したい場合は、単純に要素のポインタ型を使って &lt;code&gt;omitempty&lt;/code&gt; は使わないのが正解&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;詳細&lt;/h2&gt;

&lt;p&gt;上記のケースを最初は単純に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
	&amp;quot;encoding/xml&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
)

type Foo struct {
	Str string
}

type Bar struct {
	Foo Foo `xml:&amp;quot;,omitempty&amp;quot;`
}

func main() {
	bar := Bar{} // Foo は空
	b, err := xml.MarshalIndent(bar, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b)) // &amp;lt;Bar&amp;gt;&amp;lt;/Bar&amp;gt; と出力されてほしい
	// Output:
	// &amp;lt;Bar&amp;gt;
	//   &amp;lt;Foo&amp;gt;
	//     &amp;lt;Str&amp;gt;&amp;lt;/Str&amp;gt;
	//   &amp;lt;/Foo&amp;gt;
	// &amp;lt;/Bar&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてみたのだけど、うまくいかなかった。理由は &lt;a href=&#34;http://golang.org/pkg/encoding/xml/&#34;&gt;encoding/xml&lt;/a&gt; のドキュメントによると&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a field with a tag including the &amp;ldquo;omitempty&amp;rdquo; option is omitted
if the field value is empty. The empty values are false, 0, any
nil pointer or interface value, and any array, slice, map, or
string of length zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということで、空の構造体と比較してはくれないためのよう。ここで対象が &lt;code&gt;nil&lt;/code&gt; ポインタなら空と扱う、と書いてあるので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
	&amp;quot;encoding/xml&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
)

type Foo struct {
	Str string
}

type Bar struct {
	Foo *Foo `xml:&amp;quot;,omitempty&amp;quot;` // omitempty はあってもなくてもよい
}

func main() {
	bar := Bar{} // Foo は nil
	b, err := xml.MarshalIndent(bar, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b)) // &amp;lt;Bar&amp;gt;&amp;lt;/Bar&amp;gt; と出力されてほしい
	// Output:
	// &amp;lt;Bar&amp;gt;&amp;lt;/Bar&amp;gt;

	bar.Foo = new(Foo)
	b, err := xml.MarshalIndent(bar, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b))
	// Output:
	// &amp;lt;Bar&amp;gt;
	//   &amp;lt;Foo&amp;gt;
	//     &amp;lt;Str&amp;gt;&amp;lt;/Str&amp;gt;
	//   &amp;lt;/Foo&amp;gt;
	// &amp;lt;/Bar&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、 &lt;code&gt;Foo&lt;/code&gt; のポインタを構造体に含めるようにしてみるとうまく動く。もちろん要素がある場合も問題なく動く。さらに、この場合は別に &lt;code&gt;omitempty&lt;/code&gt; なしでも意図通りの動作になる&lt;/p&gt;

&lt;p&gt;ところが、たとえば構造体の要素が &lt;code&gt;int&lt;/code&gt; で、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; の要素が 0 である場合は、要素があるとみなして出力する（つまり &lt;code&gt;omitempty&lt;/code&gt; を無視する）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; の要素そのものが存在しない時は出力しない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の場合は、同じようにやっても期待通りにはならない。 &lt;code&gt;int&lt;/code&gt; が 0 の場合は &lt;code&gt;omitempty&lt;/code&gt; の対象として扱ってしまう&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
	&amp;quot;encoding/xml&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
)

type Foo struct {
	Bar *int `xml:&amp;quot;,omitempty&amp;quot;`
}

func main() {
	foo := Foo{}
	b, err := xml.MarshalIndent(foo, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b))
	// Output:
	// &amp;lt;Foo&amp;gt;&amp;lt;/Foo&amp;gt;

	foo.Bar = new(int)
	*(foo.Bar) = 0
	b, err = xml.MarshalIndent(foo, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b))
	// Output:
	// &amp;lt;Foo&amp;gt;&amp;lt;/Foo&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合は、要素の型をポインタ型にしつつ、素直に &lt;code&gt;omitempty&lt;/code&gt; を外すか、ポインタのポインタを使うと意図通りの結果が得られるようだ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
	&amp;quot;encoding/xml&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
)

type Foo struct {
	Bar *int
	Baz **int `xml:&amp;quot;,omitempty&amp;quot;`
}

func main() {
	foo := Foo{}
	b, err := xml.MarshalIndent(foo, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b))
	// Output:
	// &amp;lt;Foo&amp;gt;&amp;lt;/Foo&amp;gt;

	foo.Bar = new(int)
	*(foo.Bar) = 0
	tmp := new(int)
	*tmp = 0
	foo.Baz = &amp;amp;tmp
	b, err = xml.MarshalIndent(foo, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(b))
	// Output:
	// &amp;lt;Foo&amp;gt;
	//   &amp;lt;Bar&amp;gt;0&amp;lt;/Bar&amp;gt;
	//   &amp;lt;Baz&amp;gt;0&amp;lt;/Baz&amp;gt;
	// &amp;lt;/Foo&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろとややこしい&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go でインターフェース型の reflect.Type を取得する方法</title>
      <link>http://tatsushid.github.io/blog/2014/09/how-to-get-reflect-type-of-interface-type-in-go/</link>
      <pubDate>Fri, 19 Sep 2014 21:46:21 JST</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2014/09/how-to-get-reflect-type-of-interface-type-in-go/</guid>
      <description>&lt;p&gt;Go の &lt;code&gt;reflect&lt;/code&gt; パッケージを使っていて、ときどき操作している変数型との比較のために &lt;code&gt;error&lt;/code&gt; などのインターフェース型の &lt;code&gt;reflect.Type&lt;/code&gt; がほしいことがあるのだけれど、これは &lt;code&gt;reflect.TypeOf((*error)(nil)).Elem()&lt;/code&gt; のように書くことで得られる。つまり、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nil&lt;/code&gt; をほしい型のポインタ型に変換&lt;/li&gt;
&lt;li&gt;それを &lt;code&gt;reflect.TypeOf&lt;/code&gt; に渡してポインタ型の &lt;code&gt;reflect.Type&lt;/code&gt; を取得し&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Elem()&lt;/code&gt; でポインタをデリファレンスしてできる基本型の &lt;code&gt;reflect.Type&lt;/code&gt; を得る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という流れ。 Go の公式パッケージではよく見かける書法。これを使うと、たとえば変数が &lt;code&gt;error&lt;/code&gt; インターフェースを満たすかどうかの判定は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
        &amp;quot;errors&amp;quot;
        &amp;quot;fmt&amp;quot;
        &amp;quot;reflect&amp;quot;
)

func main() {
	err := errors.New(&amp;quot;A problem occurs&amp;quot;)
	et := reflect.TypeOf(err)
	if et.Implements(reflect.TypeOf((*error)(nil)).Elem()) {
		fmt.Println(&amp;quot;This is an error type&amp;quot;)
	} else {
		fmt.Println(&amp;quot;This isn&#39;t an error type&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書ける。もちろん、これはリフレクションを操作してる時の話で、普通は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
        &amp;quot;errors&amp;quot;
        &amp;quot;fmt&amp;quot;
)

func main() {
	err := errors.New(&amp;quot;A problem occurs&amp;quot;)
	if _, ok := err.(error); ok {
		fmt.Println(&amp;quot;This is an error type&amp;quot;)
	} else {
		fmt.Println(&amp;quot;This isn&#39;t an error type&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするのがよい&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静的サイトジェネレーターを Hugo に切り替えた</title>
      <link>http://tatsushid.github.io/blog/2014/08/change-site-generator-to-hugo/</link>
      <pubDate>Sat, 16 Aug 2014 14:00:00 JST</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2014/08/change-site-generator-to-hugo/</guid>
      <description>&lt;p&gt;ここ半年から一年の間、ちょっとしたコマンドラインツールの開発にはずっと golang を使ってきてて、せっかくなのでサイトジェネレーターもこの際 golang 製に変えてみようということで、 &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; を使ってみることにした。今のところの使用感としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バイナリ拾ってくるだけなのでインストール簡単&lt;/li&gt;
&lt;li&gt;サイト生成速度が速い！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; と同様に Front Matter がある（各ページのメタデータを定義できるもの）&lt;/li&gt;
&lt;li&gt;他のツールにもあるが、ローカルサーバでのプレビュー機能便利&lt;/li&gt;
&lt;li&gt;他のツールほどメジャーではないせいか、既成のテンプレートが少ない (´；ω；｀)&lt;/li&gt;
&lt;li&gt;Go 標準のテンプレートパッケージ使ってるためか、テンプレートでいろいろやろうとすると制約が厳しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところ。 golang の特質はそのままのため、がんばって言語環境整備しなくても、 Windows とか他のプラットフォームでも同じように使えるのはいいところだと思う。コード量もそれほどではないので、自分で機能を追加するのもそれほど難しくない&lt;/p&gt;

&lt;p&gt;一方でテンプレートは本当に選択肢が少なすぎるので、勉強も兼ねて、 &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; 用のテーマの &lt;a href=&#34;http://lanyon.getpoole.com/&#34;&gt;Lanyon&lt;/a&gt; を移植して、それにちょっとだけ手を加えたものを使うことにした。こちらは気が向いたら公開したい&lt;/p&gt;

&lt;p&gt;このテンプレートを作っていてわかったのは、 golang 標準の text/template と派生の html/template のテンプレートパッケージでは、書式自体は分かりやすくていいものの、制御構文が少なかったり定義した変数のスコープの絡みとかでいろいろと制約があり、プログラム側に手を入れて補助関数を作らないと、単純なものでも機能実現できないものが多々あるなあというところ。この辺りは、ロジックはあくまでプログラム側で処理し、テンプレートはそれを表示するだけだ、という考え方でできているのだと思うが、ちょっとしたカスタマイズでプログラム自体に手を入れなければいけないのは、メンテナンスの面でちょっとつらい。柔軟性の高い補助関数とかが Hugo 本家に入るのを見ていくしかないのかな、という気もする&lt;/p&gt;

&lt;p&gt;ともあれ、 Hugo 自体は必要十分な機能がよくまとまっていて、何よりサイト生成が早いこともあって、気軽に何度でもトライアンドエラーを繰り返して試せるので、個人的には気に入っている。しばらくいろいろ試してみたいと思う&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
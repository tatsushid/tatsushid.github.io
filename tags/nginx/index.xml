<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on tatsushid.github.io</title>
    <link>http://tatsushid.github.io/tags/nginx/</link>
    <description>Recent content in Nginx on tatsushid.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 19 Mar 2016 14:28:15 +0900</lastBuildDate>
    <atom:link href="http://tatsushid.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NGINX に追加された UDP ロードバランシングを試してみた</title>
      <link>http://tatsushid.github.io/blog/2016/03/tried-udp-load-balancing-added-to-nginx/</link>
      <pubDate>Sat, 19 Mar 2016 14:28:15 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2016/03/tried-udp-load-balancing-added-to-nginx/</guid>
      <description>

&lt;p&gt;つい先日、 NGINX 公式ブログでアナウンスされた &lt;a href=&#34;https://www.nginx.com/blog/announcing-udp-load-balancing/&#34;&gt;UDP ロードバランシング機能&lt;/a&gt;が気になっていたので、まだ正式リリース前ではありますが試してみました。&lt;/p&gt;

&lt;h2 id=&#34;構成:f07075f6590da3486ce18c8ef1061b72&#34;&gt;構成&lt;/h2&gt;

&lt;p&gt;UDP で代表的なプロトコルといえば DNS なので、今回は&lt;/p&gt;

&lt;div class=&#34;mermaid&#34;&gt;
graph LR
    Client --- NGINX
    NGINX --- dns1[Dnsmasq1&lt;br&gt;example.com A 127.0.0.10]
    NGINX --- dns2[Dnsmasq2&lt;br&gt;example.com A 127.0.0.20]
&lt;/div&gt;

&lt;p&gt;という構成を Docker Compose で作り、 NGINX に対して &lt;code&gt;dig&lt;/code&gt; コマンドで &lt;code&gt;example.com&lt;/code&gt; の名前解決クエリを送った時に、 &lt;code&gt;127.0.0.10&lt;/code&gt; と &lt;code&gt;127.0.0.20&lt;/code&gt; が交互に返ってくるかどうかを見ることにしました。この構成を作るに当たって必要なファイルは &lt;a href=&#34;https://github.com/tatsushid/nginx-udp-lb-example&#34;&gt;Github リポジトリ&lt;/a&gt;として公開しています。&lt;/p&gt;

&lt;h2 id=&#34;準備:f07075f6590da3486ce18c8ef1061b72&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;nginx:f07075f6590da3486ce18c8ef1061b72&#34;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;まず、 UDP ロードバランシング機能が含まれている NGINX を用意する必要がありますが、現時点では開発リポジトリ上にのみ存在する状態のため（ 1.9.13 で正式リリース予定）、 Mercurial 経由で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hg clone http://hg.nginx.org/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてソースコードを取得し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd nginx
./auto/configure --with-stream
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;--with-stream&lt;/code&gt; オプションをつけてコンパイルする必要があります。今回はこれらの一連の NGINX のビルド処理を、 &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;NGINX の Docker 公式リポジトリ&lt;/a&gt; の alpine タグの Dockerfile を元に手を加えた &lt;a href=&#34;https://github.com/tatsushid/nginx-udp-lb-example/blob/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; を作り、自動化しています。&lt;/p&gt;

&lt;p&gt;NGINX が用意できたところで設定ですが、 UDP のみのロードバランシングの場合非常にシンプルなものになります&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;worker_processes  1;

events {
    worker_connections  1024;
}

stream {
    upstream dns_udp_upstreams {
        server ${DNS1_PORT_53_UDP_ADDR}:53;
        server ${DNS2_PORT_53_UDP_ADDR}:53;
    }

    server {
        listen 53 udp;
        proxy_pass dns_udp_upstreams;
        proxy_timeout 1s;
        proxy_responses 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;upstream&lt;/code&gt; の設定は通常と同じで、ポイントは &lt;code&gt;server&lt;/code&gt; 部ですが、新たに &lt;code&gt;listen&lt;/code&gt; ディレクティブに &lt;code&gt;udp&lt;/code&gt; が指定できるようになっています。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;proxy_responses&lt;/code&gt; ディレクティブが追加され、それぞれのクライアント要求において、いくつアップストリームサーバから UDP パケットを受けとったかを数え、 &lt;code&gt;proxy_responses&lt;/code&gt; と同じだけパケットを受けとった場合には接続を閉じる、という処理を定義できます。デフォルトは無制限で、その場合、 &lt;code&gt;proxy_timeout&lt;/code&gt; の時間が経過するまで UDP パケットの到着を待ち続ける形となるようです。&lt;/p&gt;

&lt;h3 id=&#34;dnsmasq:f07075f6590da3486ce18c8ef1061b72&#34;&gt;Dnsmasq&lt;/h3&gt;

&lt;p&gt;実際の DNS リクエストに応答する Dnsmasq は &lt;a href=&#34;https://hub.docker.com/r/andyshinn/dnsmasq/&#34;&gt;andyshinn/dnsmasq&lt;/a&gt; の Docker イメージを使い、二つのサーバの起動オプションにシンプルに &lt;code&gt;--host-record&lt;/code&gt; を追加し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnsmasq -k --host-record=example.com,127.0.0.10
dnsmasq -k --host-record=example.com,127.0.0.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形でそれぞれ立ち上がるよう設定することとしました。&lt;/p&gt;

&lt;h3 id=&#34;docker-compose:f07075f6590da3486ce18c8ef1061b72&#34;&gt;Docker Compose&lt;/h3&gt;

&lt;p&gt;上記の NGINX, Dnsmasq の一連の処理を &lt;a href=&#34;https://github.com/tatsushid/nginx-udp-lb-example/blob/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; にまとめ、 &lt;code&gt;docker-compose up&lt;/code&gt; で環境全体を構築できるようにしています。&lt;/p&gt;

&lt;h2 id=&#34;動作確認:f07075f6590da3486ce18c8ef1061b72&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker-compose up&lt;/code&gt; を実行して環境を構築後、 Docker Machine を使っている場合はリクエスト先の IP アドレスを &lt;code&gt;docker-machine ip your-machine&lt;/code&gt; で調べておき、下記のようにコマンドを実行すると、交互に結果が返ってくることが確認できるかと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dig @192.168.99.100 example.com +short
127.0.0.10
$ dig @192.168.99.100 example.com +short
127.0.0.20
$ dig @192.168.99.100 example.com +short
127.0.0.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ:f07075f6590da3486ce18c8ef1061b72&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;非常にシンプルな設定で UDP ロードバランサが構築できることを確認できました。&lt;/p&gt;

&lt;p&gt;これまで UDP ロードバランサを構築しようという場合には、ユーザーモードで動作するロードバランサ、リバースプロキシソフトウェアの選択肢がほぼ存在せず、たとえば Linux においては LVS を用いてのロードバランシングが一般的でした。しかしながら LVS はカーネルモードでの動作を必要とし、昨今隆盛を極めているコンテナ内では使用できないなど、 UDP をベースにしたプロトコルを持つサービスを構築する場合には、物理サーバまたは仮想マシンに頼らざるを得ない状況でした。&lt;/p&gt;

&lt;p&gt;今回 NGINX による UDP ロードバランシング機能の提供により、他の TCP, HTTP などのプロトコルと同様に、 UDP もより自由度の高い形でロードバランサを構築することが可能となったことから、今後のサーバ構築時の選択肢を大きく変えていくのではないか、と期待しています&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
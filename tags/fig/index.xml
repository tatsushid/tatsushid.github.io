<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fig on tatsushid.github.io</title>
    <link>http://tatsushid.github.io/tags/fig/</link>
    <description>Recent content in Fig on tatsushid.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
    
    
    <lastBuildDate>Sun, 18 Jan 2015 23:21:58 &#43;0900</lastBuildDate>
    <atom:link href="http://tatsushid.github.io/tags/fig/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fig で Libreboard 環境を構築してみた</title>
      <link>http://tatsushid.github.io/blog/2015/01/managing-libreboard-containers-by-fig/</link>
      <pubDate>Sun, 18 Jan 2015 23:21:58 &#43;0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/01/managing-libreboard-containers-by-fig/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://tatsushid.github.io/blog/2015/01/run-libreboard-on-docker/&#34;&gt;前回&lt;/a&gt; は Docker 上で Libreboard を動かしてみたが、今のところ Libreboard の開発は非常に活発で、更新を Docker コンテナに反映させるたびに長々としたコマンドを叩くのが不便に感じてきたため、 &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt; を使って必要なコマンドなどをあらかじめ定義しておき、 &lt;code&gt;fig build&lt;/code&gt; や &lt;code&gt;fig up&lt;/code&gt; で楽に更新適用ができるようにしてみた。以下はその手順&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fig をインストール。今回は手元のサーバが Gentoo だったので emerge で入れてしまったが、 &lt;a href=&#34;http://www.fig.sh/install.html&#34;&gt;Installing Fig&lt;/a&gt; を見る限り、他の環境でも簡単に導入できると思う&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fig の作業ディレクトリを適当に作成して移動する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir fig_libreboard
cd fig_libreboard
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;fig.yml&lt;/code&gt; を作成する。今回は下記のようにしてみた&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;libreboard:
  build: ../libreboard
  links:
    - mongo
  ports:
    - &amp;quot;5555:8080&amp;quot;
  environment:
    ROOT_URL: &amp;quot;http://libreboard.example.com&amp;quot;
  command: &amp;quot;sh -c &#39;export MONGO_URL=mongodb://$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/libreboard; /meteor-run.sh&#39;&amp;quot;
data:
  image: busybox
  volumes:
    - /data/db
backup:
  image: busybox
  volumes_from:
    - data
mongo:
  image: mongo
  volumes_from:
    - data
  entrypoint: mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libreboard&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;backup&lt;/code&gt;, &lt;code&gt;mongo&lt;/code&gt; の 4 台構成になっている。それぞれの役割は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libreboard&lt;/code&gt; はアプリケーションを稼働させるコンテナ。先ほど作った &lt;code&gt;fig_libreboard&lt;/code&gt; と同一階層の &lt;code&gt;libreboard&lt;/code&gt; ディレクトリにある Dockerfile を読み込んで Docker イメージを構築し、それを実行する。データストアとなる MongoDB コンテナとリンクして、起動時に環境変数経由で接続を行っている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; は &lt;a href=&#34;https://docs.docker.com/userguide/dockervolumes/&#34;&gt;Managing data in containers - Docker Documentation&lt;/a&gt; で言うところのデータボリュームコンテナで、 MongoDB のデータを保持するためだけに使われている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongo&lt;/code&gt; は実際に MongoDB が稼働するコンテナ。 &lt;code&gt;data&lt;/code&gt; のボリュームに接続してデータをそこに保存している。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backup&lt;/code&gt; は、 &lt;code&gt;data&lt;/code&gt; からは &lt;code&gt;/data/db&lt;/code&gt; の中身が見えなかったため、確認作業などのために便宜上作成しておいたコンテナ。これがあると気軽に &lt;code&gt;fig run --rm backup ls -al /data/db&lt;/code&gt; などと打って中身を確認したり、 tar でのバックアップ作業がやりやすくなる。が、特別稼働そのものには関係ないので、なくてもかまわない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところ。起動コマンドやポートの設定は &lt;a href=&#34;http://tatsushid.github.io/blog/2015/01/run-libreboard-on-docker/&#34;&gt;前回&lt;/a&gt; のものを引き継ぐ形で指定している&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記設定ができたら、 &lt;code&gt;fig up&lt;/code&gt; を実行してコンテナ群を起動する。初回は &lt;code&gt;libreboard&lt;/code&gt; コンテナ用のイメージのビルドが実行されるので、少しばかり時間がかかる。無事に起動してウェブブラウザで 5555 番ポートにアクセスしてログイン画面が出れば成功。バックグラウンドでの起動に切り替えたい場合は、いったん &lt;code&gt;Ctrl-c&lt;/code&gt; を入力してコンテナ群を停止し、改めて &lt;code&gt;fig up -d&lt;/code&gt; で起動すればよい。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Libreboard の更新があった場合は &lt;code&gt;fig build&lt;/code&gt; を実行して Docker イメージを再作成する。イメージ作成に成功したら &lt;code&gt;fig up -d&lt;/code&gt; を実行して環境を再起動すればよい&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fig を使うと、このような感じで一度 &lt;code&gt;fig.yml&lt;/code&gt; を書くだけで、機能ごとに分割した複数のコンテナを保持しつつ、日常の操作は簡単な &lt;code&gt;fig&lt;/code&gt; コマンドを実行するだけで済むようになる。今回の Libreboard に限らず、 Fig を使うことでホスト側の環境にあれこれ手を入れずとも気軽にウェブアプリケーションの実行環境を用意できるので、単一ホスト内で実行させたいウェブアプリケーションの管理には非常に優れていると思う&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
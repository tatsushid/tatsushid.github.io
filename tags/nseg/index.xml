<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nseg on tatsushid.github.io</title>
    <link>http://tatsushid.github.io/tags/nseg/</link>
    <description>Recent content in Nseg on tatsushid.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 15 Dec 2015 19:06:29 +0900</lastBuildDate>
    <atom:link href="http://tatsushid.github.io/tags/nseg/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TinyCoreLinux の Docker イメージを作った話</title>
      <link>http://tatsushid.github.io/blog/2015/12/making-docker-image-of-tinycorelinux/</link>
      <pubDate>Tue, 15 Dec 2015 19:06:29 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/12/making-docker-image-of-tinycorelinux/</guid>
      <description>

&lt;p&gt;これは &lt;a href=&#34;http://www.adventar.org/calendars/808&#34;&gt;NSEG Advent Calender 2015 -Adventar&lt;/a&gt; 15 日目の記事です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatsushid.github.io/2015/12/packaging-with-docker/&#34;&gt;前回&lt;/a&gt; に引き続き Docker の話ですが、 &lt;a href=&#34;http://www.tinycorelinux.net/&#34;&gt;Tiny Core Linux&lt;/a&gt; の &lt;a href=&#34;https://hub.docker.com/r/tatsushid/tinycore/&#34;&gt;Docker イメージ&lt;/a&gt;とその仲間（たとえば &lt;a href=&#34;https://hub.docker.com/r/tatsushid/tinycore-ruby/&#34;&gt;tinycore-ruby&lt;/a&gt;）を作った話をまとめておこうと思います。&lt;/p&gt;

&lt;h2 id=&#34;tiny-core-linux-とは:3b5f7e7f5ab00186906a8ce1b6a9a96c&#34;&gt;Tiny Core Linux とは？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tinycorelinux.net/&#34;&gt;The Core Project&lt;/a&gt; で作成されている Linux ディストリビューションの一つで、有名どころでは &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt; の OS としても使われていたりします。コア機能に絞り込むと 10MB 以下、 GUI 関連パッケージまで含めても 100MB 以下と、ディスク消費が非常に小さいながらデスクトップ環境まで構築でき、独自形式ながらパッケージ機構も持っているため、他のメジャーなディストリビューションと比べて使用が難しすぎるということもなく、なかなか便利なディストリビューションです。&lt;/p&gt;

&lt;h2 id=&#34;イメージ作成動機:3b5f7e7f5ab00186906a8ce1b6a9a96c&#34;&gt;イメージ作成動機&lt;/h2&gt;

&lt;p&gt;Docker をある程度使っていると感じることかと思いますが、公式で提供されている各種ディストリビューションの Docker イメージは容量が少なくとも 200MB 越えしているものがほとんどで、かつ、それを元にした各言語の公式実行環境はそれ以上の容量となることが一般的です。&lt;/p&gt;

&lt;p&gt;一方で、特に Node.js などは比較的頻繁にリリースされ、その都度環境を更新することも多くなりますが、その度に大容量のイメージをダウンロード・展開することになります。&lt;/p&gt;

&lt;p&gt;そこで、もっとディスク容量を抑えた環境はできないかなと思っていたところ、 Tiny Core Linux の存在を知り、特定の一言語の実行環境であればもっとコンパクトなものが作れるのではないかということで、イメージ作成を試してみることにしました。&lt;/p&gt;

&lt;p&gt;結果、基本の OS イメージでは 7MB 弱、先に上げた &lt;a href=&#34;https://hub.docker.com/r/tatsushid/tinycore-ruby/&#34;&gt;tinycore-ruby&lt;/a&gt; イメージでも 60MB そこそこと、一通りの機能を組み込んだ上でもかなり容量を削ることに成功しています。&lt;/p&gt;

&lt;h2 id=&#34;tiny-core-linux-基本イメージ:3b5f7e7f5ab00186906a8ce1b6a9a96c&#34;&gt;Tiny Core Linux 基本イメージ&lt;/h2&gt;

&lt;p&gt;各言語の環境を作る前に、まずは基本となる OS イメージが必要なので、それを &lt;a href=&#34;http://www.tinycorelinux.net/6.x/x86/release/distribution_files/&#34;&gt;x86&lt;/a&gt;, &lt;a href=&#34;http://www.tinycorelinux.net/6.x/x86_64/release/distribution_files/&#34;&gt;x86_64&lt;/a&gt; それぞれで配布されている rootfs.gz ないし rootfs64.gz から構築しています。&lt;/p&gt;

&lt;p&gt;この rootfs.gz は cpio 形式でアーカイブされていますが、 Docker に読み込ませるには tar 形式である必要があるため、一度これを展開してアーカイブし直す必要があります。&lt;/p&gt;

&lt;p&gt;また、 Tiny Core Linux のパッケージは squashfs を利用して作成されており、パッケージインストール時にはこの squashfs をマウントしてファイルを取りだす仕組みになっているため、そのまま rootfs.gz を展開してイメージを作ってしまうと、パッケージ機構を利用する時にはコンテナに privileged 権限をつけて起動する必要が出てきます。これでは日常利用で不便ですので、それを回避するために、 unsquashfs を入れると同時にパッケージプログラムに少々手を加え、 privileged なしでもパッケージを扱えるようにしています&lt;/p&gt;

&lt;p&gt;イメージ生成に &lt;a href=&#34;https://docs.docker.com/docker-hub/builds/&#34;&gt;Docker の Automated Build&lt;/a&gt; を使えるようにするため、イメージ作成に必要な処理は &lt;a href=&#34;https://github.com/tatsushid/docker-tinycore&#34;&gt;Github&lt;/a&gt; にて公開していますので、詳しくはそちらを参照してください。&lt;/p&gt;

&lt;h2 id=&#34;tinycore-ruby-イメージ:3b5f7e7f5ab00186906a8ce1b6a9a96c&#34;&gt;tinycore-ruby イメージ&lt;/h2&gt;

&lt;p&gt;OS イメージができたので、それを元にして使いたい言語の環境を作るのですが、ここでは Ruby のものを例として見ていきます。&lt;/p&gt;

&lt;p&gt;基本的には&lt;a href=&#34;https://hub.docker.com/_/ruby/&#34;&gt;公式の Ruby イメージ&lt;/a&gt;と同じような使い勝手になるよう、公開されている Dockerfile の手順と同様に記述していくことになりますが、元々の目的が容量削減でしたので、一度インストールしたパッケージも動作に必須でなければ極力アンインストールするなどしています。&lt;/p&gt;

&lt;p&gt;また、公式でも同様ですが、 &lt;code&gt;RUN&lt;/code&gt; の処理を、できるだけ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN gem install bundler --version &amp;quot;$BUNDLER_VERSION&amp;quot; \
    &amp;amp;&amp;amp; bundle config --global path &amp;quot;$GEM_HOME&amp;quot; \
    &amp;amp;&amp;amp; bundle config --global bin &amp;quot;$GEM_HOME/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;\ &amp;amp;&amp;amp;&lt;/code&gt; でつなげて書いています。これは、同一のシェルコンテキストで実行とするという意味合いもありますが、それぞれを分けて、たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN gem install bundler --version &amp;quot;$BUNDLER_VERSION&amp;quot;
RUN bundle config --global path &amp;quot;$GEM_HOME&amp;quot;
RUN bundle config --global bin &amp;quot;$GEM_HOME/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書くと、それぞれの &lt;code&gt;RUN&lt;/code&gt; の処理中で生成されたデータがそのままイメージ容量に加算されていき、後の処理で不要なデータを削除したとしてもイメージ全体のサイズが減らなくなってしまうため、それを回避する目的が主です。同一コンテキスト内で最終的に不要なデータを削除しておけば、その分はイメージ容量には加算されないので、容量肥大化を防ぐことができます。&lt;/p&gt;

&lt;p&gt;ただし、このように書いてしまうと、一度イメージ作成処理に失敗すると、次に実行する時もキャッシュが効かず、同一コンテキストの最初から（つまり &lt;code&gt;RUN&lt;/code&gt; の最初から）やり直しになってしまい、特に大きなパッケージファイルをダウンロードしている時など実行時間がかかって待たされることになるため、試行錯誤している時などは個別の &lt;code&gt;RUN&lt;/code&gt; に分割しておくと、キャッシュの恩恵を受けて効率良く作業ができます。処理が固まったら改めて &lt;code&gt;\ &amp;amp;&amp;amp;&lt;/code&gt; でひとまとめにするといいでしょう。&lt;/p&gt;

&lt;p&gt;こちらも &lt;a href=&#34;https://github.com/tatsushid/docker-tinycore-ruby&#34;&gt;Github&lt;/a&gt; にてイメージ生成過程は公開してますので、具体的な内容などはそちらを参照してください。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:3b5f7e7f5ab00186906a8ce1b6a9a96c&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上のような流れで、 Ruby 以外の言語のイメージや、特定のプログラムだけを配置したイメージも比較的簡単に作ることができます。容量だけで見れば公式で配布されている &lt;a href=&#34;https://hub.docker.com/_/busybox/&#34;&gt;busybox イメージ&lt;/a&gt;を使う、という方法もありますが、それだけでは機能不足であるとか、容量は抑えつつ欲しい機能を手軽に追加したい、という向きには、このイメージは便利に使っていただけるかと思います。&lt;/p&gt;

&lt;p&gt;余談ですが、現在公開中の &lt;a href=&#34;https://hub.docker.com/r/tatsushid/tinycore-ruby/&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/tatsushid/tinycore-python/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/tatsushid/tinycore-node/&#34;&gt;Node.js&lt;/a&gt; 以外にも、 PHP, Go などの作成も試してみたのですが、 PHP は TinyCore のパッケージに含まれないライブラリへの依存関係が多く挫折、 Go は作成できたものの公式と容量が 100MB も違いがなく（主に &lt;code&gt;go get&lt;/code&gt; などの内部で使われる git, mercurial, subversion を組み込んだ影響）、あえて作る意味もないということで公開はしないこととしました。これらの言語では素直に公式イメージを使うのが吉、ということのようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker を使ってパッケージング</title>
      <link>http://tatsushid.github.io/blog/2015/12/packaging-with-docker/</link>
      <pubDate>Fri, 11 Dec 2015 00:33:25 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/12/packaging-with-docker/</guid>
      <description>

&lt;p&gt;これは &lt;a href=&#34;http://www.adventar.org/calendars/808&#34;&gt;NSEG Advent Calender 2015 -Adventar&lt;/a&gt; 11 日目の記事です。&lt;/p&gt;

&lt;h2 id=&#34;nseg-とは:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;NSEG とは？&lt;/h2&gt;

&lt;p&gt;一言で言うと「長野の IT 勉強会」ということになりますが、勉強会と言ってもお堅いものではなく、長野県やコンピュータにかかわることを幅広く取り上げて、楽しんだり技術の向上を目指す、といった感じで活動しております。詳しくは &lt;a href=&#34;http://nseg.jp/&#34;&gt;nseg.jp&lt;/a&gt; もご覧ください。&lt;/p&gt;

&lt;h2 id=&#34;これは何:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;これは何？&lt;/h2&gt;

&lt;p&gt;先日の&lt;a href=&#34;https://github.com/nseg-jp/w/wiki/第69回勉強会&#34;&gt;「理論から学ぶデータベース実践入門」読書会スペシャル&lt;/a&gt;の懇親会で、「 Docker 周辺が盛り上がっているけど、実際業務に使ってたりする？」ということを聞かれたので、自分は「独自で RPM なんかのパッケージを作る時に便利に活用してますよ」ということを話したのですが、じゃあ具体的にどんなことをしているのか、というのを公開している &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm&#34;&gt;h2o-rpm&lt;/a&gt; を元に書いてみようかな、という趣旨です。&lt;/p&gt;

&lt;p&gt;Docker 自体はウェブアプリケーションなどの展開・運用にそのまま便利に使え、そちらが本筋とも思いますが、こんな使い方もできる、という一例にしてもらえれば幸いです。なお RPM の SPEC の書き方については、今回は省略します。&lt;/p&gt;

&lt;h2 id=&#34;パッケージング作業の概要:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;パッケージング作業の概要&lt;/h2&gt;

&lt;p&gt;そもそも RPM などのパッケージを作る時は、パッケージ対象のソースコードと関連ファイル、 SPEC ファイルのようなパッケージング手順が書かれたファイルなどが必要なわけですが、もう一つ、パッケージを作成する対象のディストリビューションのクリーンな環境が必要です。しかしながらこれを毎回物理サーバやいわゆる仮想マシン上でやっていると、メンテナンスが大変、起動に時間がかかる、など作業上のストレスがあっという間にたまることになるので、気軽に作成・削除のできる Docker でその部分をやろう、ということになります。かつての boot2docker や、最近では &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt; のおかげで、自分のマシン上でもお手軽に作業ができるのも利点です。&lt;/p&gt;

&lt;p&gt;その場合のおおまかなパッケージ作成の流れは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;パッケージ作成対象のディストリビューションの環境を整える&lt;/li&gt;
&lt;li&gt;パッケージ作成に必要なソースファイルなどを Docker コンテナに展開&lt;/li&gt;
&lt;li&gt;ビルド、パッケージングを行う&lt;/li&gt;
&lt;li&gt;できたパッケージを Docker コンテナから取り出す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となりますが、 &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm&#34;&gt;h2o-rpm&lt;/a&gt; ではこれを &lt;code&gt;Dockerfile&lt;/code&gt; と &lt;code&gt;Makefile&lt;/code&gt; で記述して、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; を使ったイメージビルドを利用して、環境準備、ソース展開、ビルド、パッケージング&lt;/li&gt;
&lt;li&gt;できあがったイメージからデータ取り出しのためだけのダミーコンテナを作ってパッケージを取り出し&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という形に落とし込んで、 &lt;code&gt;make&lt;/code&gt; 一つで自動でパッケージングできるようにしています。パッケージングまでの部分は &lt;code&gt;docker run&lt;/code&gt; でやるのも一つなのですが、イメージビルドを使うことにしたのは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; だと、ローカルファイルシステム・コンテナ間でデータの受け渡し方法を用意するのが面倒&lt;/li&gt;
&lt;li&gt;結局自動処理のためにシェルスクリプトを書くことになるのなら、 &lt;code&gt;Dockerfile&lt;/code&gt; の方がシンプルで見通しがよい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; の各ステップの中間イメージが残っていくため、失敗した時の作業再開や調査がやりやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という理由によるものです。&lt;/p&gt;

&lt;p&gt;以下、リポジトリの &lt;code&gt;Dockerfile&lt;/code&gt; のうち &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm/blob/f167500a687aebb08fccb500c41a903363f94bca/Dockerfile.centos7&#34;&gt;&lt;code&gt;Dockerfile.centos7&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm/blob/f167500a687aebb08fccb500c41a903363f94bca/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を元に、この流れを見ていきます。&lt;/p&gt;

&lt;h2 id=&#34;ビルド環境の準備:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;ビルド環境の準備&lt;/h2&gt;

&lt;p&gt;まず、ビルド環境の準備は &lt;code&gt;Dockerfile&lt;/code&gt; に記述してある&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM centos:7
ENV HOME /
RUN yum update -y
RUN yum install -y rpm-build redhat-rpm-config rpmdevtools cmake gcc-c++ tar make openssl-devel ruby bison
RUN rpmdev-setuptree
RUN echo &#39;%dist   .el7&#39; &amp;gt;&amp;gt; /.rpmmacros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で行っています。 &lt;a href=&#34;https://hub.docker.com/_/centos/&#34;&gt;&lt;code&gt;centos7&lt;/code&gt; の公式イメージ&lt;/a&gt;を元に、環境内のパッケージの全アップデート、ビルド作業に必要なコンパイラなどのパッケージやビルド対象と依存関係にあるパッケージのインストール、ビルド用ディレクトリツリーの作成などを順に実施しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENV HOME /&lt;/code&gt; については、 RPM のパッケージング処理がホームディレクトリ配下の &lt;code&gt;rpmbuild&lt;/code&gt; ディレクトリを使う、という方式なのと、一般的なコンテナ内ではトップディレクトリが起点になっているというのを合わせる意味で指定しています。イメージ環境自体は使い捨てなので、通常やらないだろう設定をやってもいっこうに構いません。&lt;/p&gt;

&lt;h2 id=&#34;ソース展開:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;ソース展開&lt;/h2&gt;

&lt;p&gt;ソースの展開は &lt;code&gt;Makefile&lt;/code&gt; の&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;cp Dockerfile.$* Dockerfile
tar -czf - Dockerfile rpmbuild | docker build -t $(IMAGE_NAME) -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と &lt;code&gt;Dockerfile&lt;/code&gt; の&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ADD ./rpmbuild/ /rpmbuild/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の共同作業になります。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;Makefile&lt;/code&gt; の方ですが、各ディストリビューション用に &lt;code&gt;Dockerfile.{dist}&lt;/code&gt; のような形でを用意しているものを &lt;code&gt;Dockerfile&lt;/code&gt; にコピーした後、パッケージ用ファイルを配置してある &lt;code&gt;rpmbuild&lt;/code&gt; ディレクトリとともに &lt;code&gt;tar.gz&lt;/code&gt; 形式にまとめ、それを &lt;code&gt;docker build&lt;/code&gt; に &lt;code&gt;STDIN&lt;/code&gt; 経由で渡しています。このように渡されたファイルは、 &lt;code&gt;tar.gz&lt;/code&gt; 内のディレクトリツリー構造そのままに &lt;code&gt;Dockerfile&lt;/code&gt; の &lt;code&gt;ADD&lt;/code&gt; や &lt;code&gt;COPY&lt;/code&gt; で参照できるので、これを使ってコンテナ内の &lt;code&gt;/rpmbuild&lt;/code&gt; 以下にファイルを展開しています。&lt;/p&gt;

&lt;p&gt;この辺りについては Docker の &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/&#34;&gt;build コマンドのリファレンス&lt;/a&gt;、 &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile のリファレンス&lt;/a&gt; に詳しいです。&lt;/p&gt;

&lt;p&gt;また、最初にこの方式で書いた時期とは異なり、現在では &lt;code&gt;.dockerignore&lt;/code&gt; や &lt;code&gt;docker build&lt;/code&gt; の &lt;code&gt;-f&lt;/code&gt; オプションも使えますので、上記のような形ではなく、これらの機能を使うことでも同様のものを実現可能と思います。&lt;/p&gt;

&lt;h2 id=&#34;ビルドとパッケージング:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;ビルドとパッケージング&lt;/h2&gt;

&lt;p&gt;ここは &lt;code&gt;Dockerfile&lt;/code&gt; 内の記述になりますが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN rpmbuild -ba /rpmbuild/SPECS/h2o.spec
RUN tar -czf /tmp/h2o.tar.gz -C /rpmbuild RPMS SRPMS
CMD [&amp;quot;/bin/true&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形で、 RPM のビルド処理を行い、できあがったものを &lt;code&gt;/tmp&lt;/code&gt; 以下に &lt;code&gt;tar.gz&lt;/code&gt; ファイルとしてまとめています。このアーカイブファイルは次の取り出しで参照します。&lt;/p&gt;

&lt;p&gt;最後の &lt;code&gt;CMD&lt;/code&gt; 行は、イメージから作成したコンテナを即時終了させるために便宜的に設定したものとなります。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取り出し:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;パッケージの取り出し&lt;/h2&gt;

&lt;p&gt;ここは &lt;code&gt;Makefile&lt;/code&gt; 側の処理になりますが、前のステップまででできあがったイメージを参照し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;docker run --name $(IMAGE_NAME)-tmp $(IMAGE_NAME)
mkdir -p tmp
docker wait $(IMAGE_NAME)-tmp
docker cp $(IMAGE_NAME)-tmp:/tmp/$(TARGZ_FILE) tmp
docker rm $(IMAGE_NAME)-tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のコマンドを順に処理して、 &lt;code&gt;Dockerfile&lt;/code&gt; で生成された &lt;code&gt;tar.gz&lt;/code&gt; ファイルを取り出しています。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;docker run&lt;/code&gt; で、 &lt;code&gt;Dockerfile&lt;/code&gt; で作成したイメージを元にダミーコンテナを起動しています。 &lt;code&gt;Dockerfile&lt;/code&gt; 内で指定してある &lt;code&gt;CMD [&amp;quot;/bin/true&amp;quot;]&lt;/code&gt; により、このコンテナの実行は即座に終わります。欲しいのはダミーコンテナ内のファイルなので、コンテナが起動している必要はありません。念のため &lt;code&gt;docker wait&lt;/code&gt; を入れて、コピー処理の前にコンテナが停止しているのを確実にしています。&lt;/p&gt;

&lt;p&gt;ダミーコンテナが停止した後は &lt;code&gt;docker cp&lt;/code&gt; を使い、コンテナ内のファイルをローカルのファイルシステムにコピーし、用が済んだダミーコンテナを &lt;code&gt;docker rm&lt;/code&gt; で削除しています。&lt;/p&gt;

&lt;p&gt;欲しいファイルを取り出せたので、後は好きにこれを展開すればいいのですが、本リポジトリではこれを &lt;code&gt;{dist}.build&lt;/code&gt; のようなディレクトリ配下に展開しています。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上のような形で自動パッケージングを行い、ローカル側にコピーしてきているわけですが、もちろんできたものを直接特定のサーバにアップロードするなども自由自在です。対象もパッケージングに限らず、 Docker 環境中でなにかしらの成果物を作り、取り出す、という方法として一般的に使える、と思います。&lt;/p&gt;

&lt;p&gt;また、ここでは単に好みから &lt;code&gt;Makefile&lt;/code&gt; を使っていますが、シェルスクリプトやバッチファイルでも構いません。かつては &lt;code&gt;tar.gz&lt;/code&gt; などのアーカイブファイルを渡さなければいけない以上、 Windows で実行するのは若干難しかったように思いますが、今では前述の &lt;code&gt;.dockerignore&lt;/code&gt; や &lt;code&gt;docker build&lt;/code&gt; の &lt;code&gt;-f&lt;/code&gt; オプションもあるので、敷居は下がったのではないかと思います。&lt;/p&gt;

&lt;p&gt;さらに &lt;a href=&#34;https://www.microsoft.com/ja-jp/server-cloud/products-windows-server-2016.aspx&#34;&gt;Windows Server 2016&lt;/a&gt; では Docker がサポートされることも発表されていますので、 Windows アプリケーションも同じような手法でパッケージングできたりするのかもしれず、今後が楽しみです&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
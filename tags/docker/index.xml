<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on tatsushid.github.io</title>
    <link>http://tatsushid.github.io/tags/docker/</link>
    <description>Recent content in Docker on tatsushid.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 11 Dec 2015 00:33:25 +0900</lastBuildDate>
    <atom:link href="http://tatsushid.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker を使ってパッケージング</title>
      <link>http://tatsushid.github.io/blog/2015/12/packaging-with-docker/</link>
      <pubDate>Fri, 11 Dec 2015 00:33:25 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/12/packaging-with-docker/</guid>
      <description>

&lt;p&gt;これは &lt;a href=&#34;http://www.adventar.org/calendars/808&#34;&gt;NSEG Advent Calender 2015 -Adventar&lt;/a&gt; 11 日目の記事です。&lt;/p&gt;

&lt;h2 id=&#34;nseg-とは:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;NSEG とは？&lt;/h2&gt;

&lt;p&gt;一言で言うと「長野の IT 勉強会」ということになりますが、勉強会と言ってもお堅いものではなく、長野県やコンピュータにかかわることを幅広く取り上げて、楽しんだり技術の向上を目指す、といった感じで活動しております。詳しくは &lt;a href=&#34;http://nseg.jp/&#34;&gt;nseg.jp&lt;/a&gt; もご覧ください。&lt;/p&gt;

&lt;h2 id=&#34;これは何:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;これは何？&lt;/h2&gt;

&lt;p&gt;先日の&lt;a href=&#34;https://github.com/nseg-jp/w/wiki/第69回勉強会&#34;&gt;「理論から学ぶデータベース実践入門」読書会スペシャル&lt;/a&gt;の懇親会で、「 Docker 周辺が盛り上がっているけど、実際業務に使ってたりする？」ということを聞かれたので、自分は「独自で RPM なんかのパッケージを作る時に便利に活用してますよ」ということを話したのですが、じゃあ具体的にどんなことをしているのか、というのを公開している &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm&#34;&gt;h2o-rpm&lt;/a&gt; を元に書いてみようかな、という趣旨です。&lt;/p&gt;

&lt;p&gt;Docker 自体はウェブアプリケーションなどの展開・運用にそのまま便利に使え、そちらが本筋とも思いますが、こんな使い方もできる、という一例にしてもらえれば幸いです。なお RPM の SPEC の書き方については、今回は省略します。&lt;/p&gt;

&lt;h2 id=&#34;パッケージング作業の概要:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;パッケージング作業の概要&lt;/h2&gt;

&lt;p&gt;そもそも RPM などのパッケージを作る時は、パッケージ対象のソースコードと関連ファイル、 SPEC ファイルのようなパッケージング手順が書かれたファイルなどが必要なわけですが、もう一つ、パッケージを作成する対象のディストリビューションのクリーンな環境が必要です。しかしながらこれを毎回物理サーバやいわゆる仮想マシン上でやっていると、メンテナンスが大変、起動に時間がかかる、など作業上のストレスがあっという間にたまることになるので、気軽に作成・削除のできる Docker でその部分をやろう、ということになります。かつての boot2docker や、最近では &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt; のおかげで、自分のマシン上でもお手軽に作業ができるのも利点です。&lt;/p&gt;

&lt;p&gt;その場合のおおまかなパッケージ作成の流れは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;パッケージ作成対象のディストリビューションの環境を整える&lt;/li&gt;
&lt;li&gt;パッケージ作成に必要なソースファイルなどを Docker コンテナに展開&lt;/li&gt;
&lt;li&gt;ビルド、パッケージングを行う&lt;/li&gt;
&lt;li&gt;できたパッケージを Docker コンテナから取り出す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となりますが、 &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm&#34;&gt;h2o-rpm&lt;/a&gt; ではこれを &lt;code&gt;Dockerfile&lt;/code&gt; と &lt;code&gt;Makefile&lt;/code&gt; で記述して、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; を使ったイメージビルドを利用して、環境準備、ソース展開、ビルド、パッケージング&lt;/li&gt;
&lt;li&gt;できあがったイメージからデータ取り出しのためだけのダミーコンテナを作ってパッケージを取り出し&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という形に落とし込んで、 &lt;code&gt;make&lt;/code&gt; 一つで自動でパッケージングできるようにしています。パッケージングまでの部分は &lt;code&gt;docker run&lt;/code&gt; でやるのも一つなのですが、イメージビルドを使うことにしたのは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; だと、ローカルファイルシステム・コンテナ間でデータの受け渡し方法を用意するのが面倒&lt;/li&gt;
&lt;li&gt;結局自動処理のためにシェルスクリプトを書くことになるのなら、 &lt;code&gt;Dockerfile&lt;/code&gt; の方がシンプルで見通しがよい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; の各ステップの中間イメージが残っていくため、失敗した時の作業再開や調査がやりやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という理由によるものです。&lt;/p&gt;

&lt;p&gt;以下、リポジトリの &lt;code&gt;Dockerfile&lt;/code&gt; のうち &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm/blob/f167500a687aebb08fccb500c41a903363f94bca/Dockerfile.centos7&#34;&gt;&lt;code&gt;Dockerfile.centos7&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;https://github.com/tatsushid/h2o-rpm/blob/f167500a687aebb08fccb500c41a903363f94bca/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を元に、この流れを見ていきます。&lt;/p&gt;

&lt;h2 id=&#34;ビルド環境の準備:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;ビルド環境の準備&lt;/h2&gt;

&lt;p&gt;まず、ビルド環境の準備は &lt;code&gt;Dockerfile&lt;/code&gt; に記述してある&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM centos:7
ENV HOME /
RUN yum update -y
RUN yum install -y rpm-build redhat-rpm-config rpmdevtools cmake gcc-c++ tar make openssl-devel ruby bison
RUN rpmdev-setuptree
RUN echo &#39;%dist   .el7&#39; &amp;gt;&amp;gt; /.rpmmacros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で行っています。 &lt;a href=&#34;https://hub.docker.com/_/centos/&#34;&gt;&lt;code&gt;centos7&lt;/code&gt; の公式イメージ&lt;/a&gt;を元に、環境内のパッケージの全アップデート、ビルド作業に必要なコンパイラなどのパッケージやビルド対象と依存関係にあるパッケージのインストール、ビルド用ディレクトリツリーの作成などを順に実施しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENV HOME /&lt;/code&gt; については、 RPM のパッケージング処理がホームディレクトリ配下の &lt;code&gt;rpmbuild&lt;/code&gt; ディレクトリを使う、という方式なのと、一般的なコンテナ内ではトップディレクトリが起点になっているというのを合わせる意味で指定しています。イメージ環境自体は使い捨てなので、通常やらないだろう設定をやってもいっこうに構いません。&lt;/p&gt;

&lt;h2 id=&#34;ソース展開:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;ソース展開&lt;/h2&gt;

&lt;p&gt;ソースの展開は &lt;code&gt;Makefile&lt;/code&gt; の&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;cp Dockerfile.$* Dockerfile
tar -czf - Dockerfile rpmbuild | docker build -t $(IMAGE_NAME) -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と &lt;code&gt;Dockerfile&lt;/code&gt; の&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ADD ./rpmbuild/ /rpmbuild/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の共同作業になります。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;Makefile&lt;/code&gt; の方ですが、各ディストリビューション用に &lt;code&gt;Dockerfile.{dist}&lt;/code&gt; のような形でを用意しているものを &lt;code&gt;Dockerfile&lt;/code&gt; にコピーした後、パッケージ用ファイルを配置してある &lt;code&gt;rpmbuild&lt;/code&gt; ディレクトリとともに &lt;code&gt;tar.gz&lt;/code&gt; 形式にまとめ、それを &lt;code&gt;docker build&lt;/code&gt; に &lt;code&gt;STDIN&lt;/code&gt; 経由で渡しています。このように渡されたファイルは、 &lt;code&gt;tar.gz&lt;/code&gt; 内のディレクトリツリー構造そのままに &lt;code&gt;Dockerfile&lt;/code&gt; の &lt;code&gt;ADD&lt;/code&gt; や &lt;code&gt;COPY&lt;/code&gt; で参照できるので、これを使ってコンテナ内の &lt;code&gt;/rpmbuild&lt;/code&gt; 以下にファイルを展開しています。&lt;/p&gt;

&lt;p&gt;この辺りについては Docker の &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/&#34;&gt;build コマンドのリファレンス&lt;/a&gt;、 &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile のリファレンス&lt;/a&gt; に詳しいです。&lt;/p&gt;

&lt;p&gt;また、最初にこの方式で書いた時期とは異なり、現在では &lt;code&gt;.dockerignore&lt;/code&gt; や &lt;code&gt;docker build&lt;/code&gt; の &lt;code&gt;-f&lt;/code&gt; オプションも使えますので、上記のような形ではなく、これらの機能を使うことでも同様のものを実現可能と思います。&lt;/p&gt;

&lt;h2 id=&#34;ビルドとパッケージング:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;ビルドとパッケージング&lt;/h2&gt;

&lt;p&gt;ここは &lt;code&gt;Dockerfile&lt;/code&gt; 内の記述になりますが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;RUN rpmbuild -ba /rpmbuild/SPECS/h2o.spec
RUN tar -czf /tmp/h2o.tar.gz -C /rpmbuild RPMS SRPMS
CMD [&amp;quot;/bin/true&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形で、 RPM のビルド処理を行い、できあがったものを &lt;code&gt;/tmp&lt;/code&gt; 以下に &lt;code&gt;tar.gz&lt;/code&gt; ファイルとしてまとめています。このアーカイブファイルは次の取り出しで参照します。&lt;/p&gt;

&lt;p&gt;最後の &lt;code&gt;CMD&lt;/code&gt; 行は、イメージから作成したコンテナを即時終了させるために便宜的に設定したものとなります。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取り出し:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;パッケージの取り出し&lt;/h2&gt;

&lt;p&gt;ここは &lt;code&gt;Makefile&lt;/code&gt; 側の処理になりますが、前のステップまででできあがったイメージを参照し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;docker run --name $(IMAGE_NAME)-tmp $(IMAGE_NAME)
mkdir -p tmp
docker wait $(IMAGE_NAME)-tmp
docker cp $(IMAGE_NAME)-tmp:/tmp/$(TARGZ_FILE) tmp
docker rm $(IMAGE_NAME)-tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のコマンドを順に処理して、 &lt;code&gt;Dockerfile&lt;/code&gt; で生成された &lt;code&gt;tar.gz&lt;/code&gt; ファイルを取り出しています。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;docker run&lt;/code&gt; で、 &lt;code&gt;Dockerfile&lt;/code&gt; で作成したイメージを元にダミーコンテナを起動しています。 &lt;code&gt;Dockerfile&lt;/code&gt; 内で指定してある &lt;code&gt;CMD [&amp;quot;/bin/true&amp;quot;]&lt;/code&gt; により、このコンテナの実行は即座に終わります。欲しいのはダミーコンテナ内のファイルなので、コンテナが起動している必要はありません。念のため &lt;code&gt;docker wait&lt;/code&gt; を入れて、コピー処理の前にコンテナが停止しているのを確実にしています。&lt;/p&gt;

&lt;p&gt;ダミーコンテナが停止した後は &lt;code&gt;docker cp&lt;/code&gt; を使い、コンテナ内のファイルをローカルのファイルシステムにコピーし、用が済んだダミーコンテナを &lt;code&gt;docker rm&lt;/code&gt; で削除しています。&lt;/p&gt;

&lt;p&gt;欲しいファイルを取り出せたので、後は好きにこれを展開すればいいのですが、本リポジトリではこれを &lt;code&gt;{dist}.build&lt;/code&gt; のようなディレクトリ配下に展開しています。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:ffc6e8e4c2073712378c7d26dc5d3680&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上のような形で自動パッケージングを行い、ローカル側にコピーしてきているわけですが、もちろんできたものを直接特定のサーバにアップロードするなども自由自在です。対象もパッケージングに限らず、 Docker 環境中でなにかしらの成果物を作り、取り出す、という方法として一般的に使える、と思います。&lt;/p&gt;

&lt;p&gt;また、ここでは単に好みから &lt;code&gt;Makefile&lt;/code&gt; を使っていますが、シェルスクリプトやバッチファイルでも構いません。かつては &lt;code&gt;tar.gz&lt;/code&gt; などのアーカイブファイルを渡さなければいけない以上、 Windows で実行するのは若干難しかったように思いますが、今では前述の &lt;code&gt;.dockerignore&lt;/code&gt; や &lt;code&gt;docker build&lt;/code&gt; の &lt;code&gt;-f&lt;/code&gt; オプションもあるので、敷居は下がったのではないかと思います。&lt;/p&gt;

&lt;p&gt;さらに &lt;a href=&#34;https://www.microsoft.com/ja-jp/server-cloud/products-windows-server-2016.aspx&#34;&gt;Windows Server 2016&lt;/a&gt; では Docker がサポートされることも発表されていますので、 Windows アプリケーションも同じような手法でパッケージングできたりするのかもしれず、今後が楽しみです&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker-machine の env 設定が MacVim と競合する、らしい</title>
      <link>http://tatsushid.github.io/blog/2015/08/docker-machine-env-prevents-macvim-from-opening-window/</link>
      <pubDate>Mon, 31 Aug 2015 18:51:34 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/08/docker-machine-env-prevents-macvim-from-opening-window/</guid>
      <description>&lt;p&gt;docker-machine を使っている環境上で MacVim を起動すると、なぜか編集ウィンドウが開かない問題に遭遇したので、対応内容をメモ。&lt;/p&gt;

&lt;p&gt;結論から言うと、 docker-machine の仮想マシン起動後に設定される各種環境変数（たとえば &lt;code&gt;DOCKER_HOST&lt;/code&gt; ）を自動設定するために &lt;code&gt;.bash_profile&lt;/code&gt; の中に書いていた&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ &amp;quot;$(docker-machine status myvm)&amp;quot; = &amp;quot;Running&amp;quot; ]; then
    eval &amp;quot;$(docker-machine env myvm)&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分、特に &lt;code&gt;eval &amp;quot;$(docker-machine env myvm)&amp;quot;&lt;/code&gt; が問題を引き起こしており、これを MacVim からの起動時だけ実行しないようにすることで解消した。具体的には、 MacVim から起動した時は &lt;code&gt;TERM&lt;/code&gt; 環境変数が &lt;code&gt;dumb&lt;/code&gt; となり、通常起動時の値とは異なっていることを利用して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ &amp;quot;$TERM&amp;quot; != &amp;quot;dumb&amp;quot; -a &amp;quot;$(docker-machine status myvm)&amp;quot; = &amp;quot;Running&amp;quot; ]; then
    eval &amp;quot;$(docker-machine env myvm)&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とした。&lt;/p&gt;

&lt;p&gt;具体的にこの行がダメな理由についてはよくわからない。 MacVim 自体のソースコードを追った結果、 MacVim は mvim コマンドを開くために内部的にログインシェルを開き、そこからコマンドを起動しているらしく、その流れで &lt;code&gt;.bash_profile&lt;/code&gt; が読み込まれて実行されているようだったが、 &lt;code&gt;eval&lt;/code&gt; 自体は同じ &lt;code&gt;.bash_profile&lt;/code&gt; 中の他の部分でも使用しているので、直接それが問題のようには見えなかった。この辺りは機会があれば調べてみることに。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fig で Libreboard 環境を構築してみた</title>
      <link>http://tatsushid.github.io/blog/2015/01/managing-libreboard-containers-by-fig/</link>
      <pubDate>Sun, 18 Jan 2015 23:21:58 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/01/managing-libreboard-containers-by-fig/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://tatsushid.github.io/blog/2015/01/run-libreboard-on-docker/&#34;&gt;前回&lt;/a&gt; は Docker 上で Libreboard を動かしてみたが、今のところ Libreboard の開発は非常に活発で、更新を Docker コンテナに反映させるたびに長々としたコマンドを叩くのが不便に感じてきたため、 &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt; を使って必要なコマンドなどをあらかじめ定義しておき、 &lt;code&gt;fig build&lt;/code&gt; や &lt;code&gt;fig up&lt;/code&gt; で楽に更新適用ができるようにしてみた。以下はその手順&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fig をインストール。今回は手元のサーバが Gentoo だったので emerge で入れてしまったが、 &lt;a href=&#34;http://www.fig.sh/install.html&#34;&gt;Installing Fig&lt;/a&gt; を見る限り、他の環境でも簡単に導入できると思う&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fig の作業ディレクトリを適当に作成して移動する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir fig_libreboard
cd fig_libreboard
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;fig.yml&lt;/code&gt; を作成する。今回は下記のようにしてみた&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;libreboard:
  build: ../libreboard
  links:
    - mongo
  ports:
    - &amp;quot;5555:8080&amp;quot;
  environment:
    ROOT_URL: &amp;quot;http://libreboard.example.com&amp;quot;
  command: &amp;quot;sh -c &#39;export MONGO_URL=mongodb://$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/libreboard; /meteor-run.sh&#39;&amp;quot;
data:
  image: busybox
  volumes:
    - /data/db
backup:
  image: busybox
  volumes_from:
    - data
mongo:
  image: mongo
  volumes_from:
    - data
  entrypoint: mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libreboard&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;backup&lt;/code&gt;, &lt;code&gt;mongo&lt;/code&gt; の 4 台構成になっている。それぞれの役割は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libreboard&lt;/code&gt; はアプリケーションを稼働させるコンテナ。先ほど作った &lt;code&gt;fig_libreboard&lt;/code&gt; と同一階層の &lt;code&gt;libreboard&lt;/code&gt; ディレクトリにある Dockerfile を読み込んで Docker イメージを構築し、それを実行する。データストアとなる MongoDB コンテナとリンクして、起動時に環境変数経由で接続を行っている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; は &lt;a href=&#34;https://docs.docker.com/userguide/dockervolumes/&#34;&gt;Managing data in containers - Docker Documentation&lt;/a&gt; で言うところのデータボリュームコンテナで、 MongoDB のデータを保持するためだけに使われている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongo&lt;/code&gt; は実際に MongoDB が稼働するコンテナ。 &lt;code&gt;data&lt;/code&gt; のボリュームに接続してデータをそこに保存している。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backup&lt;/code&gt; は、 &lt;code&gt;data&lt;/code&gt; からは &lt;code&gt;/data/db&lt;/code&gt; の中身が見えなかったため、確認作業などのために便宜上作成しておいたコンテナ。これがあると気軽に &lt;code&gt;fig run --rm backup ls -al /data/db&lt;/code&gt; などと打って中身を確認したり、 tar でのバックアップ作業がやりやすくなる。が、特別稼働そのものには関係ないので、なくてもかまわない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところ。起動コマンドやポートの設定は &lt;a href=&#34;http://tatsushid.github.io/blog/2015/01/run-libreboard-on-docker/&#34;&gt;前回&lt;/a&gt; のものを引き継ぐ形で指定している&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記設定ができたら、 &lt;code&gt;fig up&lt;/code&gt; を実行してコンテナ群を起動する。初回は &lt;code&gt;libreboard&lt;/code&gt; コンテナ用のイメージのビルドが実行されるので、少しばかり時間がかかる。無事に起動してウェブブラウザで 5555 番ポートにアクセスしてログイン画面が出れば成功。バックグラウンドでの起動に切り替えたい場合は、いったん &lt;code&gt;Ctrl-c&lt;/code&gt; を入力してコンテナ群を停止し、改めて &lt;code&gt;fig up -d&lt;/code&gt; で起動すればよい。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Libreboard の更新があった場合は &lt;code&gt;fig build&lt;/code&gt; を実行して Docker イメージを再作成する。イメージ作成に成功したら &lt;code&gt;fig up -d&lt;/code&gt; を実行して環境を再起動すればよい&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fig を使うと、このような感じで一度 &lt;code&gt;fig.yml&lt;/code&gt; を書くだけで、機能ごとに分割した複数のコンテナを保持しつつ、日常の操作は簡単な &lt;code&gt;fig&lt;/code&gt; コマンドを実行するだけで済むようになる。今回の Libreboard に限らず、 Fig を使うことでホスト側の環境にあれこれ手を入れずとも気軽にウェブアプリケーションの実行環境を用意できるので、単一ホスト内で実行させたいウェブアプリケーションの管理には非常に優れていると思う&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker で Libreboard 動かしてみた</title>
      <link>http://tatsushid.github.io/blog/2015/01/run-libreboard-on-docker/</link>
      <pubDate>Mon, 12 Jan 2015 10:39:52 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2015/01/run-libreboard-on-docker/</guid>
      <description>&lt;p&gt;昨日「 &lt;a href=&#34;http://www.ryuzee.com/contents/blog/7032&#34;&gt;オープンソースのTrelloクローン Libreboard | Ryuzee.com&lt;/a&gt; 」の記事を読んで面白そうだと思ったので、 Docker で動かしてみた。一手間かかったけど動かすことはできたので、以下その手順。 Docker はインストールされてることを前提&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/libreboard/libreboard&#34;&gt;Libreboard&lt;/a&gt; のリポジトリをクローンして手元に落としてくる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/libreboard/libreboard.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;落としてきた Libreboard のディレクトリに移動し Docker イメージを作成する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd libreboard
docker build -t libreboard .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Libreboard は MongoDB をデータ保存に使用しているので、 MongoDB の Docker イメージも用意して起動しておく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull mongo
docker run --name mymongo -d mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境によっては起動時に &lt;code&gt;numactl: This system does not support NUMA policy&lt;/code&gt; といわれて起動できないことがあるので、その場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name mymongo --entrypoint=mongod -d mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形で直接 MongoDB を起動するとよい（参考： &lt;a href=&#34;http://stackoverflow.com/questions/27882091/docker-mongo-exits-on-run&#34;&gt;mongodb - Docker: Mongo exits on run - Stack Overflow&lt;/a&gt; ）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;あらかじめ作成しておいた Libreboard の Docker イメージを使ってコンテナを起動する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -dit --link mymongo:mongo -e ROOT_URL=&amp;quot;http://example.com&amp;quot; -p 5555:8080 libreboard sh -c &#39;export MONGO_URL=mongodb://$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/libreboard; /meteor-run.sh&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker の &lt;code&gt;--link&lt;/code&gt; オプションを使うと、起動したコンテナ内に link で接続した先のコンテナから環境変数が渡されてくるので、それを使って &lt;code&gt;MONGO_URL&lt;/code&gt; 環境変数を定義する。 Docker の &lt;code&gt;-e&lt;/code&gt; オプションだとコンテナ内部の変数は展開できなさそうだったため、コマンド実行時に定義している。 &lt;code&gt;ROOT_URL&lt;/code&gt; はとりあえず適当なものに。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上記の手順後、 Docker サーバの 5555 ポートにウェブブラウザでアクセスすると、めでたくログイン画面が表示された&lt;/p&gt;

&lt;p&gt;Libreboard 自体は確かにまだまだ機能不足な点が否めないが、使い勝手はよさそうだったので今後が楽しみである&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 3 の Docker イメージを作ってみた</title>
      <link>http://tatsushid.github.io/blog/2014/10/how-to-build-centos3-docker-image/</link>
      <pubDate>Sat, 04 Oct 2014 14:34:47 +0900</pubDate>
      
      <guid>http://tatsushid.github.io/blog/2014/10/how-to-build-centos3-docker-image/</guid>
      <description>

&lt;p&gt;先日の Bash 脆弱性騒ぎに関連して、ごく一部で残ってる RHEL3 系のマシンにも Bash のパッチを当てざるを得ない状況が発生したため、この際パッケージビルド用の Docker イメージも作っておくか、ということでやってみた&lt;/p&gt;

&lt;h2 id=&#34;必要なもの:0f9548c31060b9cf09120147eb98969b&#34;&gt;必要なもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 3 がインストールされているサーバないし仮想マシン&lt;/li&gt;
&lt;li&gt;Yum パッケージ&lt;/li&gt;
&lt;li&gt;CentOS 3 のパッケージが含まれているリポジトリへのアクセス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CentOS 3 のマシンは楽にやるには必須だと思う。初めは CentOS 6 上でやってみたが、後述のスクリプト実行時に最新の CentOS 6 のパッケージを拾ってこようとするのをうまく回避できなかったので、結局 CentOS 3 上で作業を行った&lt;/p&gt;

&lt;h2 id=&#34;作成の流れ:0f9548c31060b9cf09120147eb98969b&#34;&gt;作成の流れ&lt;/h2&gt;

&lt;p&gt;といっても、ほとんどやることはなくて、だいたい以下に集約される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yum.conf&lt;/code&gt; を編集して CentOS 3 パッケージが含まれているリポジトリを参照するようにする&lt;/li&gt;
&lt;li&gt;Docker プロジェクトが提供している &lt;a href=&#34;https://github.com/docker/docker/blob/master/contrib/mkimage-yum.sh&#34;&gt;mkimage-yum.sh&lt;/a&gt; を持ってきて、 CentOS 3 向けにカスタマイズする&lt;/li&gt;
&lt;li&gt;スクリプト実行して &lt;code&gt;os_image.tar.gz&lt;/code&gt; を得る&lt;/li&gt;
&lt;li&gt;できた &lt;code&gt;os_image.tar.gz&lt;/code&gt; を Docker に食わせてイメージ化する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下、個々の作業の説明&lt;/p&gt;

&lt;h3 id=&#34;yum-conf-の編集:0f9548c31060b9cf09120147eb98969b&#34;&gt;yum.conf の編集&lt;/h3&gt;

&lt;p&gt;サーバ内に Yum が入っていなければ、まずはこれが必須なので入れておくのだが、 CentOS 3 はもうメンテされていないので、パッケージを拾ってこれるミラーサーバを &lt;code&gt;yum.conf&lt;/code&gt; に設定しておかなければならない。普通は &lt;code&gt;http://vault.centos.org/&lt;/code&gt; を設定しておけばいいと思うが、当たるミラーによってはかなり遅いことになるので、場合によっては速度の出るミラーサーバの IP アドレスを &lt;code&gt;dig&lt;/code&gt; なりなんなりで調べて直接 IP アドレスを指定しておく必要があるかもしれない。具体的な変更は &lt;code&gt;yum.conf&lt;/code&gt; 内にいくつかある&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな行を&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl=http://vault.centos.org/3.9/os/i386/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書き換えておくだけである&lt;/p&gt;

&lt;h3 id=&#34;mkimage-yum-sh-のカスタマイズ:0f9548c31060b9cf09120147eb98969b&#34;&gt;mkimage-yum.sh のカスタマイズ&lt;/h3&gt;

&lt;p&gt;一番手間取ったのがここだったが、わかってしまえばなんということもない内容。書き換えたスクリプトはこんな感じ&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/tatsushid/22d169ea1e91e8941773.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;はまったポイントは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mktemp が古いためにオプションの扱いが違う。最初気付かずやって、それなりの量のシステムファイルを消してしまった…&lt;/li&gt;
&lt;li&gt;パッケージを検証する GPG KEY を Yum が勝手には拾ってきてくれないので、自分で先に対象ディレクトリに落としておく&lt;/li&gt;
&lt;li&gt;なぜか Docker にインポートした後 RPM DB が壊れているようだったので、 &lt;code&gt;yum clean&lt;/code&gt; 後に &lt;code&gt;rpm --rebuilddb&lt;/code&gt; を実行しておく&lt;/li&gt;
&lt;li&gt;ldconfig キャッシュは消してもいいが、できたイメージをすぐ使いたい時は、ライブラリが見つからなくていちいち再構築も面倒なので、残しておく&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところ&lt;/p&gt;

&lt;h3 id=&#34;スクリプトの実行:0f9548c31060b9cf09120147eb98969b&#34;&gt;スクリプトの実行&lt;/h3&gt;

&lt;p&gt;これはそのまんま、上記で作成しておいた &lt;code&gt;yum.conf&lt;/code&gt; を &lt;code&gt;mkimage-yum.sh&lt;/code&gt; に指定して実行するだけである。うまくいけば &lt;code&gt;os_image.tar.gz&lt;/code&gt; がカレントディレクトリ内に作られる&lt;/p&gt;

&lt;h3 id=&#34;docker-でイメージ化:0f9548c31060b9cf09120147eb98969b&#34;&gt;Docker でイメージ化&lt;/h3&gt;

&lt;p&gt;できた &lt;code&gt;os_image.tar.gz&lt;/code&gt; を Docker が動いている環境に持ってきて、下記のようにコマンドを実行する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat os_image.tar.gz | docker import - centos-3-i386
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;centos-3-i386&lt;/code&gt; の部分はイメージ名になるので、好きなように設定すればよい。インポートに成功したら、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i -t centos-3-i386 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにして使い始めることができる&lt;/p&gt;

&lt;h2 id=&#34;まとめ:0f9548c31060b9cf09120147eb98969b&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;上記の流れでできたイメージを使って、無事パッチ済みの Bash の RPM の作成もできたので、日常の作業には十分な環境が作成できたと思う&lt;/p&gt;

&lt;p&gt;Docker のイメージを作ったのは初めてだったが、 OS が稼働するのに必要なファイル群を tar に固めて食わせるだけ、というのは手軽でいい。各種ディストリビューションごとにマイクロ環境を作れるようなツールがあったりするので、それを使えば気楽にイメージが作れるだろうな、と思う&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>